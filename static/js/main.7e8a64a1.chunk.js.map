{"version":3,"sources":["Components/Navigation.js","Components/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","React","Component","MainContent","props","state","load","data","axios","get","headers","then","res","resume","setState","console","log","this","imgurl","field_res_image","src","alt","title","body","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7e8a64a1.chunk.js","sourcesContent":["import React from 'react';\n\nclass Navigation extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"/\">Drupal & React</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/\">Skills</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/\">Contact</a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default Navigation;","import React, { Component } from 'react';\nimport '../css/App.css';\nimport axios from \"axios\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass MainContent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      load: false, \n      data: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get(`https://widespreadtopic.com/resfulapi/v1/resume`, {\n      headers: {\n        'Content-Type': 'application/json'\n    }\n    })\n    .then(res => {\n      const resume = res.data[0];\n     this.setState({ data: resume});\n    });\n  }\n\n  render() {\n   console.log(this.state.data);\n   const imgurl = \"https://widespreadtopic.com/\" + this.state.data.field_res_image;\n\n    return (\n      <div>\n       <div className=\"container\">\n          <div className=\"react-pic\"><img src={imgurl} alt=\"drupal&react\"/></div> \n          <div className=\"react-title\">{this.state.data.title}</div>\n          <div className=\"react-body\">{this.state.data.body}</div>\n       </div>\n      </div>\n    );\n  }\n}\n\nexport default MainContent;\n","import React, { Component } from 'react';\nimport Navigation from './Components/Navigation';\nimport './css/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MainContent from './Components/MainContent';\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div>\n       <Navigation />\n       <div className=\"container\">\n       <MainContent />\n       </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}